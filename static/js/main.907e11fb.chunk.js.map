{"version":3,"sources":["BingMapLoader.tsx","BingMap.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Microsoft","BingMap","mapRef","React","map","areasEntities","pinEntities","mapChanged","Subject","infobox","updatePins","a","pins","zoom","getZoom","pin","entities","remove","areas","area","url","window","location","hostname","indexOf","axios","get","getBounds","bounds","resp","data","name","geos","geo","pushPin","Maps","Pushpin","Location","lat","lng","text","color","push","Events","addHandler","pushpinClicked","console","log","length","shape","GeoJson","read","json","e","target","setOptions","getLocation","title","description","visible","highlight","params","key","Promise","resolve","reject","script","document","createElement","type","async","defer","src","bingAPIReady","onerror","error","body","appendChild","loadBingApi","then","initMap","loadModule","next","Infobox","getCenter","setMap","this","pipe","debounceTime","subscribe","ref","className","brazilBox","LocationRect","fromLocations","Map","current","mapTypeId","MapTypeId","aerial","minZoom","center","stackTokens","FontWeights","semibold","childrenGap","App","Stack","horizontalAlign","verticalAlign","verticalFill","styles","root","width","margin","textAlign","tokens","mapOptions","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","mergeStyles","padding","height","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.907e11fb.chunk.js","sourcesContent":["// tslint:disable:interface-name\r\nexport interface MapWindow extends Window {\r\n  Microsoft: any;\r\n  bingAPIReady: () => void; \r\n}\r\n\r\ndeclare let window: MapWindow;\r\nexport let Microsoft: any;\r\n\r\n\r\n\r\nexport function loadBingApi(key: string): Promise<void> {\r\n  const callbackName = \"bingAPIReady\";\r\n  let url = `https://www.bing.com/api/maps/mapcontrol?callback=${callbackName}&branch=experimental`;\r\n  if (key) {\r\n    url += `&key=${key}`;\r\n  }\r\n\r\n  return new Promise((resolve, reject) => {\r\n    const script = document.createElement(\"script\");\r\n    script.type = \"text/javascript\";\r\n    script.async = true;\r\n    script.defer = true;\r\n    script.src = url;\r\n    window.bingAPIReady = () => {\r\n      Microsoft = window.Microsoft;\r\n      resolve();\r\n    };\r\n    script.onerror = (error: Event|string) => {\r\n      reject(error);\r\n    };\r\n    document.body.appendChild(script);\r\n  });\r\n}\r\n","import * as React from \"react\";\r\nimport { loadBingApi, Microsoft } from \"./BingMapLoader\";\r\nimport axios from \"axios\";\r\nimport { debounceTime } from \"rxjs/operators\";\r\nimport { Subject } from \"rxjs\";\r\n\r\ninterface IMapProps {\r\n  mapOptions?: any;\r\n}\r\n\r\nconst key = \"AlhCe8XWn9qAY3ohEYMFdMNBiyKoBvIAW1X8XSiIXaip2kWTWy6jdLma-eCWCVsO\";\r\n\r\nexport default class BingMap extends React.Component<IMapProps, any> {\r\n  private mapRef = React.createRef<HTMLDivElement>();\r\n  private map: any;\r\n  private areasEntities: any = {};\r\n  private pinEntities: any = {};\r\n  private mapChanged = new Subject();\r\n\r\n  private infobox: any;\r\n\r\n  public componentDidMount() {\r\n    loadBingApi(key).then(async () => {\r\n      const map = this.initMap();\r\n      this.map = map;\r\n\r\n      Microsoft.Maps.loadModule(\"Microsoft.Maps.GeoJson\", () => {\r\n        Microsoft.Maps.Events.addHandler(map, \"click\", this.highlight);\r\n        Microsoft.Maps.Events.addHandler(map, \"viewchangeend\", () =>\r\n          this.mapChanged.next(map)\r\n        );\r\n        this.updatePins();\r\n        this.infobox = new Microsoft.Maps.Infobox(map.getCenter(), {\r\n          visible: false,\r\n        });\r\n        this.infobox.setMap(map);\r\n      });\r\n    });\r\n    this.mapChanged.pipe(debounceTime(500)).subscribe(this.updatePins);\r\n  }\r\n\r\n  private updatePins = async () => {\r\n    const zoom = this.map.getZoom();\r\n    for (const pins in this.pinEntities) {\r\n      for (const pin of this.pinEntities[pins]) {\r\n        this.map.entities.remove(pin);\r\n      }\r\n      delete this.pinEntities[pins];\r\n    }\r\n    if (zoom < 10) {\r\n      for (const areas in this.areasEntities) {\r\n        for (const area of this.areasEntities[areas]) {\r\n          this.map.entities.remove(area);\r\n        }\r\n        delete this.areasEntities[areas];\r\n      }\r\n      this.areasEntities = {};\r\n    }\r\n    let url = \"https://rodvieirasilva.pythonanywhere.com\";\r\n    if (window.location.hostname.indexOf(\"localhost\") > -1) {\r\n      url = \"http://localhost:5000\";\r\n    }\r\n    const resp = await axios.get(\r\n      `${url}/pins?zoom=${zoom}&bounds=${this.map.getBounds().bounds}`\r\n    );\r\n    for (const pin of resp.data) {\r\n      this.areasEntities[pin.name] = this.areasEntities[pin.name] || [];\r\n      this.pinEntities[pin.name] = this.pinEntities[pin.name] || [];\r\n      let green = false;\r\n      for (const geo of pin.geos) {\r\n        var pushPin = new Microsoft.Maps.Pushpin(\r\n          new Microsoft.Maps.Location(geo.lat, geo.lng),\r\n          {\r\n            text: pin.text,\r\n            color: pin.color,\r\n          }\r\n        );\r\n        pushPin.pin = pin;\r\n        this.pinEntities[pin.name].push(pushPin);\r\n        this.map.entities.push(pushPin);\r\n        Microsoft.Maps.Events.addHandler(pushPin, \"click\", this.pushpinClicked);\r\n        console.log(zoom, resp.data.length);\r\n        if (zoom >= 10 && resp.data.length < 20) {\r\n          //if (this.areasEntities[pin.name].length != pin.geos.length) {\r\n          var shape = Microsoft.Maps.GeoJson.read(geo.json);\r\n          this.areasEntities[pin.name].push(shape);\r\n          this.map.entities.push(shape);\r\n          //}\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  private pushpinClicked = (e: any) => {\r\n    const pin = e.target.pin;\r\n    if (pin) {\r\n      this.infobox.setOptions({\r\n        location: e.target.getLocation(),\r\n        title: pin.title,\r\n        description: pin.description,\r\n        visible: true,\r\n      });\r\n    }\r\n  };\r\n\r\n  private highlight = async (params: any) => {\r\n    //const result = await axios.get();\r\n    //console.log(params);\r\n    console.log(params, this.map.getBounds(), this.map.getZoom());\r\n  };\r\n\r\n  public render() {\r\n    return <div ref={this.mapRef} className=\"map\" />;\r\n  }\r\n\r\n  private initMap() {\r\n    const brazilBox = Microsoft.Maps.LocationRect.fromLocations(\r\n      new Microsoft.Maps.Location(6.067439945929365, -10.128615333183788),\r\n      new Microsoft.Maps.Location(-32.86130440585188, -94.50361533318379)\r\n    );\r\n    return new Microsoft.Maps.Map(this.mapRef.current, {\r\n      mapTypeId: Microsoft.Maps.MapTypeId.aerial,\r\n      minZoom: 5,\r\n      bounds: brazilBox,\r\n      center: new Microsoft.Maps.Location(\r\n        -13.257928544766926,\r\n        -49.121355290840725\r\n      ),\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport { Stack, Text, Link, FontWeights, IStackTokens } from '@fluentui/react';\r\nimport './App.css';\r\nimport BingMap from './BingMap';\r\n\r\nconst boldStyle = { root: { fontWeight: FontWeights.semibold } };\r\nconst stackTokens: IStackTokens = { childrenGap: 15 };\r\n\r\nexport const App: React.FunctionComponent = () => {\r\n  return (\r\n    <Stack\r\n      horizontalAlign=\"center\"\r\n      verticalAlign=\"center\"\r\n      verticalFill\r\n      styles={{\r\n        root: {\r\n          width: '100%',\r\n          margin: '0 auto',\r\n          textAlign: 'center',\r\n          color: '#605e5c',\r\n        },\r\n      }}\r\n      tokens={stackTokens}\r\n    >\r\n     <BingMap\r\n      mapOptions={{\r\n        center: [-11.123341, -64.481926]\r\n      }}\r\n    />\r\n    </Stack>\r\n  );\r\n};\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\nimport { mergeStyles } from '@fluentui/react';\nimport reportWebVitals from './reportWebVitals';\n\n// Inject some global styles\nmergeStyles({\n  ':global(body,html,#root)': {\n    margin: 0,\n    padding: 0,\n    height: '100vh',\n  },\n});\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}