{"version":3,"sources":["BingMapLoader.tsx","BingMap.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Microsoft","BingMap","mapRef","React","key","url","Promise","resolve","reject","script","document","createElement","type","async","defer","src","window","bingAPIReady","onerror","error","body","appendChild","loadBingApi","then","initMap","ref","this","className","map","Maps","Map","current","props","mapOptions","setOptions","stackTokens","FontWeights","semibold","childrenGap","App","Stack","horizontalAlign","verticalAlign","verticalFill","styles","root","width","margin","textAlign","color","tokens","center","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","mergeStyles","padding","height","ReactDOM","render","getElementById"],"mappings":"6IAOWA,E,2FCEUC,E,4MACXC,OAASC,c,uDAEjB,WAA4B,IAAD,QDDtB,SAAqBC,GAC1B,IACIC,EAAG,4DADc,gBAMrB,OAJID,IACFC,GAAG,eAAYD,IAGV,IAAIE,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAASC,SAASC,cAAc,UACtCF,EAAOG,KAAO,kBACdH,EAAOI,OAAQ,EACfJ,EAAOK,OAAQ,EACfL,EAAOM,IAAMV,EACbW,OAAOC,aAAe,WACpBjB,EAAYgB,OAAOhB,UACnBO,KAEFE,EAAOS,QAAU,SAACC,GAChBX,EAAOW,IAETT,SAASU,KAAKC,YAAYZ,OClB1Ba,CANM,oEAMWC,MAAK,WACpB,EAAKC,e,oBAIT,WACE,OAAO,qBAAKC,IAAKC,KAAKxB,OAAQyB,UAAU,U,qBAG1C,WACE,IAAMC,EAAM,IAAI5B,EAAU6B,KAAKC,IAAIJ,KAAKxB,OAAO6B,SAI/C,OAHIL,KAAKM,MAAMC,YACbL,EAAIM,WAAWR,KAAKM,MAAMC,YAErBL,M,GAlB0BzB,aCH/BgC,GADkCC,IAAYC,SAClB,CAAEC,YAAa,KAEpCC,EAA+B,WAC1C,OACE,cAACC,EAAA,EAAD,CACEC,gBAAgB,SAChBC,cAAc,SACdC,cAAY,EACZC,OAAQ,CACNC,KAAM,CACJC,MAAO,OACPC,OAAQ,SACRC,UAAW,SACXC,MAAO,YAGXC,OAAQf,EAZV,SAcC,cAAC,EAAD,CACCF,WAAY,CACVkB,OAAQ,CAAC,UAAW,iBCZbC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqB/B,MAAK,YAAkD,IAA/CgC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCFdO,YAAY,CACV,2BAA4B,CAC1Bb,OAAQ,EACRc,QAAS,EACTC,OAAQ,WAIZC,IAASC,OAAO,cAAC,EAAD,IAAStD,SAASuD,eAAe,SAKjDb,M","file":"static/js/main.135890c6.chunk.js","sourcesContent":["// tslint:disable:interface-name\r\nexport interface MapWindow extends Window {\r\n  Microsoft: any;\r\n  bingAPIReady: () => void; \r\n}\r\n\r\ndeclare let window: MapWindow;\r\nexport let Microsoft: any;\r\n\r\n\r\n\r\nexport function loadBingApi(key: string): Promise<void> {\r\n  const callbackName = \"bingAPIReady\";\r\n  let url = `https://www.bing.com/api/maps/mapcontrol?callback=${callbackName}`;\r\n  if (key) {\r\n    url += `&key=${key}`;\r\n  }\r\n\r\n  return new Promise((resolve, reject) => {\r\n    const script = document.createElement(\"script\");\r\n    script.type = \"text/javascript\";\r\n    script.async = true;\r\n    script.defer = true;\r\n    script.src = url;\r\n    window.bingAPIReady = () => {\r\n      Microsoft = window.Microsoft;\r\n      resolve();\r\n    };\r\n    script.onerror = (error: Event|string) => {\r\n      reject(error);\r\n    };\r\n    document.body.appendChild(script);\r\n  });\r\n}\r\n","import * as React from \"react\";\r\nimport { loadBingApi, Microsoft } from \"./BingMapLoader\";\r\n\r\ninterface IMapProps {\r\n    mapOptions?: any;\r\n}\r\n\r\nconst key=\"AlhCe8XWn9qAY3ohEYMFdMNBiyKoBvIAW1X8XSiIXaip2kWTWy6jdLma-eCWCVsO\";\r\n\r\nexport default class BingMap extends React.Component<IMapProps, any> {\r\n  private mapRef = React.createRef<HTMLDivElement>();\r\n\r\n  public componentDidMount() {\r\n    loadBingApi(key).then(() => {\r\n      this.initMap();\r\n    });\r\n  }\r\n\r\n  public render() {\r\n    return <div ref={this.mapRef} className=\"map\" />;\r\n  }\r\n\r\n  private initMap() {\r\n    const map = new Microsoft.Maps.Map(this.mapRef.current);\r\n    if (this.props.mapOptions) {\r\n      map.setOptions(this.props.mapOptions);\r\n    }\r\n    return map;\r\n  }\r\n}\r\n","import React from 'react';\r\nimport { Stack, Text, Link, FontWeights, IStackTokens } from '@fluentui/react';\r\nimport './App.css';\r\nimport BingMap from './BingMap';\r\n\r\nconst boldStyle = { root: { fontWeight: FontWeights.semibold } };\r\nconst stackTokens: IStackTokens = { childrenGap: 15 };\r\n\r\nexport const App: React.FunctionComponent = () => {\r\n  return (\r\n    <Stack\r\n      horizontalAlign=\"center\"\r\n      verticalAlign=\"center\"\r\n      verticalFill\r\n      styles={{\r\n        root: {\r\n          width: '100%',\r\n          margin: '0 auto',\r\n          textAlign: 'center',\r\n          color: '#605e5c',\r\n        },\r\n      }}\r\n      tokens={stackTokens}\r\n    >\r\n     <BingMap\r\n      mapOptions={{\r\n        center: [47.60357, -122.32945]\r\n      }}\r\n    />\r\n    </Stack>\r\n  );\r\n};\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\nimport { mergeStyles } from '@fluentui/react';\nimport reportWebVitals from './reportWebVitals';\n\n// Inject some global styles\nmergeStyles({\n  ':global(body,html,#root)': {\n    margin: 0,\n    padding: 0,\n    height: '100vh',\n  },\n});\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}